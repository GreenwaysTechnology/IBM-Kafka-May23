				Kafka fundamentals
.....................................................................................
What is kafka ? Apache Kafka

Kafka is a java program, written in java.

Kafka was originally developed at Linkedin, and later it was open sourced, 
Jay Kreps, Neha ,and juno Rao who created kafka.

If you want to understand kafka , just think about , How logs are working.

Log is just information about what happend in your system.
for instance, some warnings, some errors, some info,tracing.

Log information is recored in a file which is called log file.

How log works?
 log works based on the concept called append only, which is mere file io.
file io involves read and write something(data).

Writing data into file in two mode.

=>replace mode  
   data is written into file which will be replaced or edited later.
=>Append only mode
   data is written into file at end of every line just add entry at last line of file, which is called append only


Kafka is based on log, Kafka is just logger system.

Kafak is based on commit log.

What is commit log?
    In data management platforms, a commit is making of set of tenative changes permanent.
 making the end of a transaction and providing Durablity to ACID transactions.
The record of commits is called "commit log".

What Kafka is going to record into commit log?
   Kafka was desigend to capture informations(data) or events about system.
 What is happening in the software system, i want to record every thing.


What is event?
  something that happens, or happened.
An event records the fact that "something happened" in the world or in your biz, or in your life, around you.

eg:
  today stock avg price is 100$
  i met my friend yesterday at east coast road
  Made a payment of $500 to Ramesh

Imagine i need some body/something should record every activity of my life from early moring when i get up and till sleep.

 There is a system to record every events of your life that is called kafka.

Kafka is event recorder, Kafaka records events happened in the system.

Kafak is event processing software, which process events.

Events Types:
............
1.Past events - Happened
      Made a payment of $500 to Ramesh
2.present events - on going / on progress  events

Event Streams:
.............
Stream is nothing but  on going or on progress over period of time.
We can record on going events /on progress events into system


"An Event is any type of action or incident or chage that's idenfified or recorded by software or applications eg a payment, a website click or temperature reading, along with with a description of what happended"

"A event is a coimbination of notification", the element of when-ness that can be used to trigger some other activity and state.

"event contains two things"
 =>What happened - name of the event
 =>State - data


state:
.......
 The state is nothing data 

How generally data/state is stored?
   information is stored in database as table which represents the state of something
eg user- id,name,city

can we store events in databases?
 We cant  store all events in the database

Modern data modeling:
 Now a days instead of thingking "things(Customer,Order,Payment)" first, people starts thinking events first
 instead of stroing things into db, we store events.

events also has some state like "things"

"events has some description of what happened with it, but primary idea is that event is an indication in time that thing took place"
    
      "You cant store every events happened or happing in the system into db"

How do you store events?
  Logs - Log is structured and the sequence of the events occured in the method calls.
.....................................................................................
			  What is apache kafka?

Kafka is a software system for managining these logs using a fairly standard,the same historical term called "topics".

What is topic?
 Topic is logical structure to store events which is similar to database schema and database table

What is event according to kafka?

  Event is like key-value pair structure just like table row of data

Topic is logical structure which stores sequence of information
Topic is log of events.

Features of logcs:
=>logs are easy to understand
=>logs are append only
=>logs are immutable
=>logs are highly durable=>By default all events are recorded into file system, there is no concept like non durable that is we never store data in memory.
=>Can only seek by offset, not indexed
.....................................................................................
			Kafka is highly Distributed
.....................................................................................
Traditionally, log processors are not scalable or highly available.
Kafka is distributed log processing system, which  scals log data into multiple system.
...................................................................................
			Kafak Distribution - Kafka setup
..................................................................................

Kafka distribution:
 Kafka is availble in two distribution

1.Apache Kafka
  It is opensource version of kafka
2.Confulent kafka
  It is abstraction of apache kafka , commerical version of Apache kafka

Apache Kafka vs Confulent kafka:
https://www.confluent.io/apache-kafka-vs-confluent/


Platforms:
1.bare metal 
 kafka is distributed for all os

1.windows : may be good for basic use cases
2.linux  : recommended for advanced use cases
3.mac : recommended for advanced use cases.

2.VM env
  you can setup kafka on any industry standard vms -  oracle virtual box

3.Container based distributed - docker and kubernets
    it is highly recommend for dev and also even in productions.
....................................................................................
			Linux Setup
................................................................................
windows Sub System - Linux -  wsl
https://www.confluent.io/blog/set-up-and-run-kafka-on-windows-linux-wsl-2/?utm_medium=sem&utm_source=google&utm_campaign=ch.sem_br.nonbrand_tp.prs_tgt.dsa_mt.dsa_rgn.india_lng.eng_dv.all_con.blog&utm_term=&creative=&device=c&placement=&gclid=CjwKCAiAioifBhAXEiwApzCztroeBf99rY2AQ8kqOxzpA4vWwv_pe4qIQ682fYDA6hF9JJSJ6gN61hoCJQwQAvD_BwE.

After installing :


sudo apt install openjdk-11-jdk -y


https://archive.apache.org/dist/kafka/3.4.0/kafka-3.4.0-src.tgz  

tar -xzf kafka-3.4.0-src.tgz 
cd kafka_2.13-2.6.0


we need to look at folder structure

subugee@LAPTOP-R2TGGFDL:~/session/kafka-3-4-0$ ls -al
total 60
drwxr-xr-x 6 subugee subugee  4096 Jul 28  2020 .
drwxr-xr-x 3 subugee subugee  4096 Feb  7 16:37 ..
drwxr-xr-x 3 subugee subugee  4096 Jul 28  2020 bin
drwxr-xr-x 2 subugee subugee  4096 Jul 28  2020 config
drwxr-xr-x 2 subugee subugee  4096 Feb  7 16:37 libs
-rw-r--r-- 1 subugee subugee 29975 Jul 28  2020 LICENSE
-rw-r--r-- 1 subugee subugee   337 Jul 28  2020 NOTICE
drwxr-xr-x 2 subugee subugee  4096 Jul 28  2020 site-docs
.....................................................................................

Bin folder contains kafka distribution for linux

subugee@LAPTOP-R2TGGFDL:~/ibmkafkamay23/kafka-3.4.0-src/bin$ ls
connect-distributed.sh        kafka-dump-log.sh              kafka-server-stop.sh
connect-mirror-maker.sh       kafka-features.sh              kafka-storage.sh
connect-standalone.sh         kafka-get-offsets.sh           kafka-streams-application-reset.sh
kafka-acls.sh                 kafka-leader-election.sh       kafka-topics.sh
kafka-broker-api-versions.sh  kafka-log-dirs.sh              kafka-transactions.sh
kafka-cluster.sh              kafka-metadata-quorum.sh       kafka-verifiable-consumer.sh
kafka-configs.sh              kafka-metadata-shell.sh        kafka-verifiable-producer.sh
kafka-console-consumer.sh     kafka-mirror-maker.sh          trogdor.sh
kafka-console-producer.sh     kafka-producer-perf-test.sh    windows
kafka-consumer-groups.sh      kafka-reassign-partitions.sh   zookeeper-security-migration.sh
kafka-consumer-perf-test.sh   kafka-replica-verification.sh  zookeeper-server-start.sh
kafka-delegation-tokens.sh    kafka-run-class.sh             zookeeper-server-stop.sh
kafka-delete-records.sh       kafka-server-start.sh          zookeeper-shell.sh


windows folder contains kafka windows distribution

subugee@LAPTOP-R2TGGFDL:~/ibmkafkamay23/kafka-3.4.0-src/bin$ cd windows
subugee@LAPTOP-R2TGGFDL:~/ibmkafkamay23/kafka-3.4.0-src/bin/windows$ ls
connect-distributed.bat        kafka-delete-records.bat        kafka-run-class.bat
connect-standalone.bat         kafka-dump-log.bat              kafka-server-start.bat
kafka-acls.bat                 kafka-get-offsets.bat           kafka-server-stop.bat
kafka-broker-api-versions.bat  kafka-leader-election.bat       kafka-storage.bat
kafka-configs.bat              kafka-log-dirs.bat              kafka-streams-application-reset.bat
kafka-console-consumer.bat     kafka-metatada-quorum.bat       kafka-topics.bat
kafka-console-producer.bat     kafka-mirror-maker.bat          kafka-transactions.bat
kafka-consumer-groups.bat      kafka-producer-perf-test.bat    zookeeper-server-start.bat
kafka-consumer-perf-test.bat   kafka-reassign-partitions.bat   zookeeper-server-stop.bat
kafka-delegation-tokens.bat    kafka-replica-verification.bat  zookeeper-shell.bat
...................................................................................
			Core concepts of Kafka
...................................................................................

Broker:
  Since Kafka is java program which is deployed on jvm,kafka runs on the jvm process
Which is called kafka server or kafka broker

By default kafka broker is distributed(Scalable-running mulitiple instance of the same broker) across multiple machines or same machine


Cluster:
  A kafak cluster is  a system that consits of serveral brokers
 The cluster helps to distribute work loads equally among replicas

By default kafka is clustered commit log system.

In order to manage cluster we have cluster management software.

There are two cluster manager supported by kafka

1.Apache ZooKeeper:
  Zookeeper is a centeralized service for maintaining configuration information, naming,providing distributed synchronization and providing group services

2.KRaft:
  Apache Kafka Raft , KRaft is conensus protocal that was introduced to replace Apach Zookeeper for meta data management.

Zookeeper role:
=>Cluster Management
=>Failure detection and recovery
=>Store ACL and secrets

Lab 1: Kafka cluster setup
..........................
Single broker , single zookeeper

Broker and zookeeper requires configuration files  in order to start kafka broker and zookeeper

Zooker config file:
config/zookeeper.properties

dataDir=/tmp/zookeeper
the directory where the snapshot is stored, information about the cluster

clientPort=2181
  The port at which clients connect.
  Who is client ? Kafak Broker is client

Server/Broker config folder:

config/server.properties
# The id of the broker. This must be set to a unique integer for each broker.
broker.id=0

Steps:

1.Start Zookeeper

./bin/zookeeper-server-start.sh  config/zookeeper.properties
Classpath is empty. Please build the project first e.g. by running './gradlew jar -PscalaVersion=2.13.10'


if you see the above error that means your distribution is source code distribution
so you have to build it.

How to build?
./gradlew jar -PscalaVersion=2.13.10

after building again start the server

 ./bin/zookeeper-server-start.sh  config/zookeeper.properties

SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/subugee/ibmkafkamay23/kafka-3.4.0-src/tools/build/dependant-libs-2.13.10/slf4j-reload4j-1.7.36.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/subugee/ibmkafkamay23/kafka-3.4.0-src/trogdor/build/dependant-libs-2.13.10/slf4j-reload4j-1.7.36.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/subugee/ibmkafkamay23/kafka-3.4.0-src/connect/runtime/build/dependant-libs/slf4j-reload4j-1.7.36.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/subugee/ibmkafkamay23/kafka-3.4.0-src/connect/mirror/build/dependant-libs/slf4j-reload4j-1.7.36.jar!/org/slf4j/impl/StaticLoggerBinder.class]

How to start kafka broker?
kafka-3.4.0-src$ ./bin/kafka-server-start.sh config/server.properties
...................................................................................
			 Exploring kafka logs
....................................................................................

Cluster logs - Zookeeper or KRaft:
..................................
tmp/zookeeper

Kafak Logs:
/tmp/kafka-logs
.......................................XXX...........................................
				Topic
..................................................................................

What is topic?
There are lot of events in the world.
We need to organize them in the system , Now Kafka fundamental unit  of event  organization is called “Topic”

Topic is just like table in relational database.

As a developer using kafka, the topic is the abstraction for logs

You can create different types of topics to hold different types of events

You can filter and transform the different topics,coimbine them into one topic

A topic is log of events,logs are easy to understand

Topics are simple data structures with well known semantics, They are append only

When you write message(event),it always goes on the end.

When you read message from the logs by seeking offset in the log.

Logs are fundamental durable things, Traditional messaging  systems have topics and queues, which store messages temporarily to buffer them between source and designation

Since topics are logs, which is always permenant.

You can store logs(events) as short to as long as years or even to retain messages indefinitely.

Steps :

How to create topic?

in order to create topic , you need somebody to create topic.

Producer:
 A producer just a program written in any language, or even producer cli, responsible to send/publish events to the broker.
 A Producer publish events to broker's topic

Lab: how to create topic using "kafka-topics"

This tool helps to create, delete, describe, or change a topic


./bin/kafka-topics.sh --help

Option                                   Description
------                                   -----------
--alter                                  Alter the number of partitions,
                                           replica assignment, and/or
                                           configuration for the topic.
--at-min-isr-partitions                  if set when describing topics, only
                                           show partitions whose isr count is
                                           equal to the configured minimum.
--bootstrap-server <String: server to    REQUIRED: The Kafka server to connect
  connect to>                              to.
--command-config <String: command        Property file containing configs to be
  config property file>                    passed to Admin Client. This is used
                                           only with --bootstrap-server option
                                           for describing and altering broker
                                           configs.
--config <String: name=value>            A topic configuration override for the
                                           topic being created or altered. The
                                           following is a list of valid
                                           configurations:
                                                cleanup.policy
                                                compression.type
                                                delete.retention.ms
                                                file.delete.delay.ms
                                                flush.messages
                                                flush.ms
                                                follower.replication.throttled.
                                           replicas
                                                index.interval.bytes
                                                leader.replication.throttled.replicas
                                                local.retention.bytes
                                                local.retention.ms
                                                max.compaction.lag.ms
                                                max.message.bytes
                                                message.downconversion.enable
                                                message.format.version
                                                message.timestamp.difference.max.ms
                                                message.timestamp.type
                                                min.cleanable.dirty.ratio
                                                min.compaction.lag.ms
                                                min.insync.replicas
                                                preallocate
                                                remote.storage.enable
                                                retention.bytes
                                                retention.ms
                                                segment.bytes
                                                segment.index.bytes
                                                segment.jitter.ms
                                                segment.ms
                                                unclean.leader.election.enable
                                         See the Kafka documentation for full
                                           details on the topic configs. It is
                                           supported only in combination with --
                                           create if --bootstrap-server option
                                           is used (the kafka-configs CLI
                                           supports altering topic configs with
                                           a --bootstrap-server option).
--create                                 Create a new topic.
--delete                                 Delete a topic
--delete-config <String: name>           A topic configuration override to be
                                           removed for an existing topic (see
                                           the list of configurations under the
                                           --config option). Not supported with
                                           the --bootstrap-server option.
--describe                               List details for the given topics.
--disable-rack-aware                     Disable rack aware replica assignment
--exclude-internal                       exclude internal topics when running
                                           list or describe command. The
                                           internal topics will be listed by
                                           default
--help                                   Print usage information.
--if-exists                              if set when altering or deleting or
                                           describing topics, the action will
                                           only execute if the topic exists.
--if-not-exists                          if set when creating topics, the
                                           action will only execute if the
                                           topic does not already exist.
--list                                   List all available topics.
--partitions <Integer: # of partitions>  The number of partitions for the topic
                                           being created or altered (WARNING:
                                           If partitions are increased for a
                                           topic that has a key, the partition
                                           logic or ordering of the messages
                                           will be affected). If not supplied
                                           for create, defaults to the cluster
                                           default.
--replica-assignment <String:            A list of manual partition-to-broker
  broker_id_for_part1_replica1 :           assignments for the topic being
  broker_id_for_part1_replica2 ,           created or altered.
  broker_id_for_part2_replica1 :
  broker_id_for_part2_replica2 , ...>
--replication-factor <Integer:           The replication factor for each
  replication factor>                      partition in the topic being
                                           created. If not supplied, defaults
                                           to the cluster default.
--topic <String: topic>                  The topic to create, alter, describe
                                           or delete. It also accepts a regular
                                           expression, except for --create
                                           option. Put topic name in double
                                           quotes and use the '\' prefix to
                                           escape regular expression symbols; e.
                                           g. "test\.topic".
--topic-id <String: topic-id>            The topic-id to describe.This is used
                                           only with --bootstrap-server option
                                           for describing topics.
--topics-with-overrides                  if set when describing topics, only
                                           show topics that have overridden
                                           configs
--unavailable-partitions                 if set when describing topics, only
                                           show partitions whose leader is not
                                           available
--under-min-isr-partitions               if set when describing topics, only
                                           show partitions whose isr count is
                                           less than the configured minimum.
--under-replicated-partitions            if set when describing topics, only
                                           show under replicated partitions
--version                                Display Kafka version.

...................................................................................

--create                                 Create a new topic.

./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic todo-topic

Created topic todo-topic.

After creating topic, you can explore log file location

/tmp/kafka-logs
       |
     todo-topic-0

Inside folder kafka-logs, todo-topic-0  is going to encapsulate topics as folders.

if you create more topics, each topic is represented as folder.

/tmp/kafka-logs
       |
     todo-topic-0
     message-topic-0

here what is zero ?
  zero represents broker id by default
.....................................................................................
			How to look at the topic structure/topic
.....................................................................................

--describe --topic todo-topic

 ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic todo-topic

Topic: todo-topic 
TopicId: Hz9XqoH4SYWpottd-uqakA
PartitionCount: 1
ReplicationFactor: 1
Configs:
 Topic: todo-topic       Partition: 0    Leader: 0       Replicas: 0     Isr: 0
....................................................................................
		       How to delete the topic
.....................................................................................
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic todo-topic

once the delete command is executed, the topic name is renamed rather it wont delete from the Permantently.

It simply rename the folder name 
todo-topic-0.3c849068285f41bd986eeb4b7f79c35f-delete
.....................................................................................
			How to restore deleted topics
......................................................................................
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic todo-topic

You will able to get deleted topics again.
.....................................................................................
		How to publish messages into Kafka
....................................................................................

./bin/kafka-console-producer.sh --help

Option                                   Description
------                                   -----------
--batch-size <Integer: size>             Number of messages to send in a single
                                           batch if they are not being sent
                                           synchronously. please note that this
                                           option will be replaced if max-
                                           partition-memory-bytes is also set
                                           (default: 16384)
--bootstrap-server <String: server to    REQUIRED unless --broker-list
  connect to>                              (deprecated) is specified. The server
                                           (s) to connect to. The broker list
                                           string in the form HOST1:PORT1,HOST2:
                                           PORT2.
--broker-list <String: broker-list>      DEPRECATED, use --bootstrap-server
                                           instead; ignored if --bootstrap-
                                           server is specified.  The broker
                                           list string in the form HOST1:PORT1,
                                           HOST2:PORT2.
--compression-codec [String:             The compression codec: either 'none',
  compression-codec]                       'gzip', 'snappy', 'lz4', or 'zstd'.
                                           If specified without value, then it
                                           defaults to 'gzip'
--help                                   Print usage information.
--line-reader <String: reader_class>     The class name of the class to use for
                                           reading lines from standard in. By
                                           default each line is read as a
                                           separate message. (default: kafka.
                                           tools.
                                           ConsoleProducer$LineMessageReader)
--max-block-ms <Long: max block on       The max time that the producer will
  send>                                    block for during a send request.
                                           (default: 60000)
--max-memory-bytes <Long: total memory   The total memory used by the producer
  in bytes>                                to buffer records waiting to be sent
                                           to the server. This is the option to
                                           control `buffer.memory` in producer
                                           configs. (default: 33554432)
--max-partition-memory-bytes <Integer:   The buffer size allocated for a
  memory in bytes per partition>           partition. When records are received
                                           which are smaller than this size the
                                           producer will attempt to
                                           optimistically group them together
                                           until this size is reached. This is
                                           the option to control `batch.size`
                                           in producer configs. (default: 16384)
--message-send-max-retries <Integer>     Brokers can fail receiving the message
                                           for multiple reasons, and being
                                           unavailable transiently is just one
                                           of them. This property specifies the
                                           number of retries before the
                                           producer give up and drop this
                                           message. This is the option to
                                           control `retries` in producer
                                           configs. (default: 3)
--metadata-expiry-ms <Long: metadata     The period of time in milliseconds
  expiration interval>                     after which we force a refresh of
                                           metadata even if we haven't seen any
                                           leadership changes. This is the
                                           option to control `metadata.max.age.
                                           ms` in producer configs. (default:
                                           300000)
--producer-property <String:             A mechanism to pass user-defined
  producer_prop>                           properties in the form key=value to
                                           the producer.
--producer.config <String: config file>  Producer config properties file. Note
                                           that [producer-property] takes
                                           precedence over this config.
--property <String: prop>                A mechanism to pass user-defined
                                           properties in the form key=value to
                                           the message reader. This allows
                                           custom configuration for a user-
                                           defined message reader.
                                         Default properties include:
                                          parse.key=false
                                          parse.headers=false
                                          ignore.error=false
                                          key.separator=\t
                                          headers.delimiter=\t
                                          headers.separator=,
                                          headers.key.separator=:
                                          null.marker=   When set, any fields
                                           (key, value and headers) equal to
                                           this will be replaced by null
                                         Default parsing pattern when:
                                          parse.headers=true and parse.key=true:
                                           "h1:v1,h2:v2...\tkey\tvalue"
                                          parse.key=true:
                                           "key\tvalue"
                                          parse.headers=true:
                                           "h1:v1,h2:v2...\tvalue"
--reader-config <String: config file>    Config properties file for the message
                                           reader. Note that [property] takes
                                           precedence over this config.
--request-required-acks <String:         The required `acks` of the producer
  request required acks>                   requests (default: -1)
--request-timeout-ms <Integer: request   The ack timeout of the producer
  timeout ms>                              requests. Value must be non-negative
                                           and non-zero. (default: 1500)
--retry-backoff-ms <Long>                Before each retry, the producer
                                           refreshes the metadata of relevant
                                           topics. Since leader election takes
                                           a bit of time, this property
                                           specifies the amount of time that
                                           the producer waits before refreshing
                                           the metadata. This is the option to
                                           control `retry.backoff.ms` in
                                           producer configs. (default: 100)
--socket-buffer-size <Integer: size>     The size of the tcp RECV size. This is
                                           the option to control `send.buffer.
                                           bytes` in producer configs.
                                           (default: 102400)
--sync                                   If set message send requests to the
                                           brokers are synchronously, one at a
                                           time as they arrive.
--timeout <Long: timeout_ms>             If set and the producer is running in
                                           asynchronous mode, this gives the
                                           maximum amount of time a message
                                           will queue awaiting sufficient batch
                                           size. The value is given in ms. This
                                           is the option to control `linger.ms`
                                           in producer configs. (default: 1000)
--topic <String: topic>                  REQUIRED: The topic id to produce
                                           messages to.
--version                                Display Kafka version.
.....................................................................................

How to publish events?
  Events are published into topics

./bin/kafka-console-producer.sh --bootstrap-server localhost
:9092 --topic todo-topic
>Hello IBM
>Hello Kafka
>
Press Ctrl Key to come out from the REPL prompt.
.....................................................................................				  Consumer
....................................................................................
How to consume or process messages/events ?
=>Find kakfa topic name eg todo-topic
=>Find host name and port eg localhost:9092
=>if you want to read future message(Current message being published)
=>if you want to read histrical message , from the begining


./bin/kafka-console-consumer.sh --help

Option                                   Description
------                                   -----------
--bootstrap-server <String: server to    REQUIRED: The server(s) to connect to.
  connect to>
--consumer-property <String:             A mechanism to pass user-defined
  consumer_prop>                           properties in the form key=value to
                                           the consumer.
--consumer.config <String: config file>  Consumer config properties file. Note
                                           that [consumer-property] takes
                                           precedence over this config.
--enable-systest-events                  Log lifecycle events of the consumer
                                           in addition to logging consumed
                                           messages. (This is specific for
                                           system tests.)
--formatter <String: class>              The name of a class to use for
                                           formatting kafka messages for
                                           display. (default: kafka.tools.
                                           DefaultMessageFormatter)
--formatter-config <String: config       Config properties file to initialize
  file>                                    the message formatter. Note that
                                           [property] takes precedence over
                                           this config.
--from-beginning                         If the consumer does not already have
                                           an established offset to consume
                                           from, start with the earliest
                                           message present in the log rather
                                           than the latest message.
--group <String: consumer group id>      The consumer group id of the consumer.
--help                                   Print usage information.
--include <String: Java regex (String)>  Regular expression specifying list of
                                           topics to include for consumption.
--isolation-level <String>               Set to read_committed in order to
                                           filter out transactional messages
                                           which are not committed. Set to
                                           read_uncommitted to read all
                                           messages. (default: read_uncommitted)
--key-deserializer <String:
  deserializer for key>
--max-messages <Integer: num_messages>   The maximum number of messages to
                                           consume before exiting. If not set,
                                           consumption is continual.
--offset <String: consume offset>        The offset to consume from (a non-
                                           negative number), or 'earliest'
                                           which means from beginning, or
                                           'latest' which means from end
                                           (default: latest)
--partition <Integer: partition>         The partition to consume from.
                                           Consumption starts from the end of
                                           the partition unless '--offset' is
                                           specified.
--property <String: prop>                The properties to initialize the
                                           message formatter. Default
                                           properties include:
                                          print.timestamp=true|false
                                          print.key=true|false
                                          print.offset=true|false
                                          print.partition=true|false
                                          print.headers=true|false
                                          print.value=true|false
                                          key.separator=<key.separator>
                                          line.separator=<line.separator>
                                          headers.separator=<line.separator>
                                          null.literal=<null.literal>
                                          key.deserializer=<key.deserializer>
                                          value.deserializer=<value.
                                           deserializer>
                                          header.deserializer=<header.
                                           deserializer>
                                         Users can also pass in customized
                                           properties for their formatter; more
                                           specifically, users can pass in
                                           properties keyed with 'key.
                                           deserializer.', 'value.
                                           deserializer.' and 'headers.
                                           deserializer.' prefixes to configure
                                           their deserializers.
--skip-message-on-error                  If there is an error when processing a
                                           message, skip it instead of halt.
--timeout-ms <Integer: timeout_ms>       If specified, exit if no message is
                                           available for consumption for the
                                           specified interval.
--topic <String: topic>                  The topic to consume on.
--value-deserializer <String:
  deserializer for values>
--version                                Display Kafka version.
--whitelist <String: Java regex          DEPRECATED, use --include instead;
  (String)>                                ignored if --include specified.
                                           Regular expression specifying list
                                           of topics to include for consumption.




 ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic todo-topic --from-beginning

Hello IBM
Hello Kafka
How are you?
How is kafka topic
.....................................................................................
		   if you want to publish events and consume in live

--from-beginning
   option reads all events first , then it starts reading current event is being published.
  It reads all messages/events then waits for new event

if you dont use --from-beinning option, it reads only last message delivered
...................................................................................
 			Basic Consumer Properties

=>TimeStamp

./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic todo-topic --from-beginning  --property print.timestamp=true
CreateTime:1683174520742        Hello IBM
CreateTime:1683174525906        Hello Kafka
CreateTime:1683175248417        How are you?
CreateTime:1683175264446        How is kafka topic
CreateTime:1683175481732        Kafka enables events streams
CreateTime:1683175514841        Learn kafka
.....................................................................................
				Partition
.....................................................................................	

What is partition?
 In order to distribute the "storage and processing of events" in a topic, Kafka uses the concept partition.
 The topic is made of one or more partition and theses partitions can reside on different nodes in the kafka cluster.
 
The partition is the main unit of stroage for kakfa events, although with tiered storage, which will talk about later.

The partition is also the unit of parallelism.

Events can be produced to a topic in parallel by writing to multiple partitions at the same time. like wise , consumers can spread their workload by individual consumer instances read from different partitions.
if we only use one partition we effectly use one consumer instance.

By default there is one partition.

Lab : 

How to create multiple  partitions for a given topic?
How to break the topic into partitions

Create a topic with 2 partitions.

./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic demo-topic --partitions 2
Created topic demo-topic	

After supplying partition option you can inside kafka-logs folder

/tmp/kafka-logs
   |
    demo-topic-0
	will have its own log files   
    demo-topic-1
        will have its own log files


Describe the topic after partitions creation:

./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic demo-topic

Topic: demo-topic       TopicId: yVjUBGbDQPqEWqW2FAoM8Q PartitionCount: 2   
ReplicationFactor: 1
 Configs:
  Topic: demo-topic       Partition: 0    Leader: 0       Replicas: 0     Isr: 0
  Topic: demo-topic       Partition: 1    Leader: 0       Replicas: 0     Isr: 0

....................................................................................
			   Adding more partitions
.....................................................................................

1.create topic with 2 partitions

./bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic sales-topic --partitions 2

2.Describe topic details
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic sales-topic
Topic: sales-topic      TopicId: AtEnN2MVT1ylKjm1wdbvxQ PartitionCount: 2       ReplicationFactor: 1    Configs:
        Topic: sales-topic      Partition: 0    Leader: 0       Replicas: 0     Isr: 0
        Topic: sales-topic      Partition: 1    Leader: 0       Replicas: 0     Isr: 0
s

3.Add more partitions
./bin/kafka-topics.sh --bootstrap-server localhost:9092 --alter --topic sales-topic  --partitions 2
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
				Segement
.................................................................................

Topics are broken into partitions, Partitions are broken into segment.

What is Segment?
   Segment is nothing single log file.
Each Segment is stored in a single data file on the disk attached to the broker.

How to list segements(Log files) ?
subugee@LAPTOP-R2TGGFDL:/tmp/kafka-logs/demo-topic-0$ ls -l
total 8
-rw-r--r-- 1 subugee subugee 10485760 May  4 11:28 00000000000000000000.index
-rw-r--r-- 1 subugee subugee        0 May  4 10:50 00000000000000000000.log
-rw-r--r-- 1 subugee subugee 10485756 May  4 11:28 00000000000000000000.timeindex
-rw-r--r-- 1 subugee subugee        8 May  4 11:28 leader-epoch-checkpoint
-rw-r--r-- 1 subugee subugee       43 May  4 10:50 partition.metadata

Here segment is group of files
.log
.index
.timeindex

Segment is just log file where real/actual(Record/Message) is stored in the form of byte array

.log file is actually stores "Events/Records/Message".

Topics are broken down into partitions, where as a partition is broken down into segements.
Each Segment is stored in a single data file on the disk attached to the partion(topic)(broker).

Each segment file size may 1 GB of data or week of data, which ever limit is attained first.

When the kafka broker receives data for a partion for eg partion-0, as the segment limit is reached, it will clos the file and starts a new one.
...................................................................................
			   Log file /Segment architecture
...................................................................................

How event/data/message is stored into segment?

The log file is structured with two parts

1.Actual data
2.Offset 

Actual data is event published into segement as "Record" which is simple byte array.
Offset:
   An offset into a file is simply the character location within that file, usually starting with 0; thus "offset 240" is actually the 241st byte in the file.

  h    b  c  d e f g                       =>Actual data
 -----------------------------------------------------------------------------
  0    1  2  3 4 5 6 7 8 9 10 11 12 13.... => offset
 ------------------------------------------------------------------------------

 Segement 0      Segment 1:         segment 2:             Segement3:Active
offset 0-957=>   offset 958-1675 => offset 1676 to 2453 => Offset:2454-?    <= writes

One one segement can be active at any point in time- the one data is being written to.

The size of the segement is controlled by two broker configuration

log.segment.bytes

The maximum size of a single log file

Type:	int
Default:	1073741824 (1 gibibyte)

log.segment.ms
 The time kafka will wait before commiting the segemnt if not full 
 default : 1 week

Note:
  A kafa broker keeps an open file handler to every active segement in every partition, even inactive segements.This leads to a usually high number of open file handles, and the OS must be tuned accordingly.
.....................................................................................
			 Index Files
.....................................................................................











